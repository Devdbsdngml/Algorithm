Pre-Test 1 차 기출문제
문제
모든 원소가 0 또는 1 인 행렬이 있습니다. 1 로 표시된 원소는 영역을 나타냅니다. 여기에서 상하좌우에 인접한 1
은 같은 영역이라고 가정합니다. 각 영역의 크기는 1 의 개수로 정의합니다. 주어진 N x N 크기의 행렬에서 영역의
개수와 각 영역의 크기를 오름차순으로 출력하세요.
[입력]
• 첫 번째 행은 행렬의 크기인 N입니다. N 은 1 이상 10 이하의 자연수입니다.
• 입력 두 번째 행부터는 공백으로 구분된 0 과 1 로 행렬이 주어집니다. 각 행은 개행 문자(newline, \n)로
구분됩니다.
[출력]
• 첫 번째 행은 영역의 개수를 출력합니다.
• 두 번째 행은 각 영역의 크기를 공백으로 구분하여 오름차순으로 출력합니다.
• 한 행의 끝은 불필요한 공백 없이 개행 문자(newline, \n)로 끝나야 합니다.
• 영역이 존재하지 않을 경우 영역 수 0으로 1 행으로만 출력합니다.
[행렬 및 영역 예시]
영역은 3개이며, 각 영역의 크기는 4, 5, 7입니다.
아래 테스트 케이스에서 예제로 2 개를 오픈하므로 별도로 예를 들 필요가 없습니다.


static class Point{
        int x;
        int y;
        Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int[] dx = {0, -1, 0, 1};
    static int[] dy = {-1, 0, 1, 0};
    
    static int[][] map;
    static boolean[][] visited;
    static int cnt;
    static int n;
    
    public static void main(String args[]) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        n = Integer.parseInt(br.readLine());
        
        map = new int[n][n];
        visited = new boolean[n][n];
        
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        
        List<Integer> list = new ArrayList<>();
        int areaNum = 0;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(map[i][j] != 0 && !visited[i][j]){
                    cnt = 1;
                    bfs(i, j);
                    areaNum++;
                    list.add(cnt);
                }
            }
        }
        System.out.println(areaNum);
        Collections.sort(list);
        
        for(int i=0; i<list.size(); i++){
            System.out.print(list.get(i)+" ");
        }
    }
    
    static void bfs(int x, int y){
        Queue<Point> que = new LinkedList<>();
        que.add(new Point(x, y));
        visited[x][y] = true;
        
        while(!que.isEmpty()){
            Point point = que.poll();
            
            for(int i=0; i<4; i++){
                int nx = point.x + dx[i];
                int ny = point.y + dy[i];
                
                if(0 <= nx && nx < n && 0<= ny && ny < n){
                    if(map[nx][ny] == map[x][y] && !visited[nx][ny]){
                        que.add(new Point(nx, ny));
                        visited[nx][ny] = true;
                        cnt++;
                    }
                }
            }
        }
    }
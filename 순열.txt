
// 순열 : n 개 중에서 r 개를 순서있게 뽑기
// 시간복잡도: O(n!)


public class Permutation {
    public static void main(String[] args) {
        int n = 3;
        int[] arr = {1, 2, 3};
        int[] output = new int[n];
        boolean[] visited = new boolean[n];

        perm(arr, output, visited, 0, n, 3);
        System.out.println();
        permutation(arr, 0, n, 3);
    }

// 사전순으로 순열 구하기
// 사용 예시: perm(arr, output, visited, 0, n, 3);
    static void perm(int[] arr, int[] output, boolean[] visited, int depth, int n, int r) {
        if (depth == r) {
            print(output, r);
            return;
        }

        for (int i = 0; i < n; i++) {
            if (visited[i] != true) {
                visited[i] = true;
                output[depth] = arr[i];
                perm(arr, output, visited, depth + 1, n, r);
                visited[i] = false;
            }
        }
    }

// 순열 구하기
// 사용 예시: permutation(arr, 0, n, 4);
    static void permutation(int[] arr, int depth, int n, int r) {
        if (depth == r) {
            print(arr, r);
            return;
        }

        for (int i = depth; i < n; i++) {
            swap(arr, depth, i);
            permutation(arr, depth + 1, n, r);
            swap(arr, depth, i);
        }
    }

    static void swap(int[] arr, int depth, int i) {
        int temp = arr[depth];
        arr[depth] = arr[i];
        arr[i] = temp;
    }

// 배열 출력
    static void print(int[] arr, int r) {
        for (int i = 0; i < r; i++)
            System.out.print(arr[i] + " ");
        System.out.println();
    }
}



// LinkedList 로 구현한 순열, 중복순열, 조합, 중복조합

public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        int r = sc.nextInt();
        
        int[] arr = new int[n];
        for(int i=1; i<=n; i++)
            arr[i-1] = i;
        
        LinkedList<Integer> list = new LinkedList<>();
        
        boolean[] visited = new boolean[n];
        System.out.println("******순열******");
        permutation(list, visited, n, r);
        list.clear();
        
        System.out.println("****중복순열****");
        rePermutation(list, n, r);
        list.clear();
        
        System.out.println("******조합******");
        combination(list, n, r, 0);
        list.clear();
        
        System.out.println("****중복조합****");
        reCombination(list, n, r, 0);
    }
    
    // 순열
    private static void permutation(LinkedList<Integer> list, boolean[] visited, int n, int r){
        if(list.size() == r){
            for(int i : list)
                System.out.print(i+" ");
            System.out.println();
            return;
        }
        
        for(int i=0; i<n; i++){
            if(!visited[i]){
                visited[i] = true;
                list.add(i);
                permutation(list, visited, n, r);
                list.removeLast();
                visited[i] = false;
            }
        }
    }
    
    // 중복순열
    private static void rePermutation(LinkedList<Integer> list, int n, int r){
        if(list.size() == r){
            for(int i : list)
                System.out.print(i+" ");
            System.out.println();
            return;
        }
        
        for(int i=0; i<n; i++){
            list.add(i);
            rePermutation(list, n ,r);
            list.removeLast();
        }
    }
    
    // 조합
    private static void combination(LinkedList<Integer> list, int n, int r, int depth){
        if(r == 0){ // r == 0 -> 다 뽑음
            for(int i : list)
                System.out.print(i+" ");
            System.out.println();
            return;
        }
        
        if(depth == n) return; // depth == n -> 탐색 끝
        
        list.add(depth);
        combination(list, n, r-1, depth + 1);
        list.removeLast();
        combination(list, n, r, depth + 1);
    }
    
    // 중복조합
    private static void reCombination(LinkedList<Integer> list, int n, int r, int depth){
        if(r == 0){
            for(int i : list)
                System.out.print(i+" ");
            System.out.println();
            return;
        }
        
        if(depth == n) return;
        
        list.add(depth);
        reCombination(list, n, r-1, depth);
        list.removeLast();
        reCombination(list, n, r, depth + 1);
    }


3과 2를 입력받는경우

 

3 2
***순열(0,1,2)***
0 1 
0 2 
1 0 
1 2 
2 0 
2 1 
***중복순열(0,1,2)***
0 0 
0 1 
0 2 
1 0 
1 1 
1 2 
2 0 
2 1 
2 2 
***조합(0,1,2)***
0 1 
0 2 
1 2 
***중복조합(0,1,2)***
0 0 
0 1 
0 2 
1 1 
1 2 
2 2 
import java.io.*;
import java.util.*;

public class Main{
    static class Rift implements Comparable<Rift>{
        int idx;
        int time;
        int pri;

        public Rift(int idx, int time, int pri) {
            this.idx = idx;
            this.time = time;
            this.pri = pri;
        }

        @Override
        public int compareTo(Rift o) {
            if(this.time > o.time){
                return 1;
            } else if(this.time == o.time){
                return this.pri - o.pri;
            }
            return 0;
        }
    }

    private static BufferedReader br;
    private static BufferedWriter bw;

    static PriorityQueue<Rift> que;
    static ArrayList<Integer> ansList;

    public static void main(String[] args) throws IOException {
        br = new BufferedReader(new InputStreamReader(System.in));
        bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        int[] t = {0, 1, 3, 0}; // 도착 시간
        int[] r = {0, 1, 2, 3}; // 등급(낮을수록 높은등급)

        int[] res = solution(t, r);

        for(int i : res){
            bw.write(i+" ");
        }

        bw.newLine();

        int[] t2 = {6, 8, 7, 1}; // 도착 시간
        int[] r2 = {0, 1, 2, 3}; // 등급(낮을수록 높은등급)

        int[] res2 = solution(t2, r2);

        for(int i : res2){
            bw.write(i+" ");
        }

        bw.flush();
        br.close();
        bw.close();
    }

    private static int[] solution(int[] t, int[] r) {
        int[] answer = new int[t.length];
        que = new PriorityQueue<>();
        ansList = new ArrayList<>();

        int startTime = Arrays.stream(t).min().getAsInt();
        int endTime = Arrays.stream(t).max().getAsInt();

        // 0초, 1초, 2초, ...
        for(int i=startTime; i<=endTime; i++){
            for(int j=0; j<t.length; j++){
                if(i == t[j]){
                    que.offer(new Rift(j, t[j], r[j]));
                }
            }

            // 시간대 별로 Queue에 offer
            if(!que.isEmpty()){
                Rift rift = que.poll();
                int idx = rift.idx;

                ansList.add(idx);
                int size = que.size();
                while(size-- > 0){
                    Rift nextRift = que.poll();
                    que.offer(new Rift(nextRift.idx, nextRift.time+1, nextRift.pri));
                }
            }
        }

        for(int i=0; i<ansList.size(); i++){
            answer[i] = ansList.get(i);
        }

        return answer;
    }
}
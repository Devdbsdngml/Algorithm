- Simple, Slow

// 버블정렬
// 인접한 두 개의 데이터를 비교해가면서 정렬을 진행하는 방식 O(n^2)

  private static void bubbleSort(int[] input, int length) {
    for (int i = length - 1; i > 0; i--)
      for (int j = 0; j < i; j++) {
        if (input[j] > input[j + 1]) {
          int tmp = input[j];
          input[j] = input[j + 1];
          input[j + 1] = tmp;
        }
      }
  }

// 선택정렬
// 최대 원소를 찾아 맨 오른쪽 원소와 교환하며 정렬을 진행하는 방식 O(n^2)

  private static void selectionSortMin(int[] input, int length) {
    int min;
    int tmp;
    for (int i = 0; i < length - 1; i++) {
      min = i;
      for (int j = i + 1; j < length; j++) {
        if (input[j] < input[min])
          min = j;
      }
      tmp = input[i];
      input[i] = input[min];
      input[min] = tmp;
    }
  }

  private static void selectionSortMax(int[] input, int length) {
    int max;
    int tmp;
    for (int i = length - 1; i > 0; i--) {
      max = i;
      for (int j = i -1; j >= 0; j--) {
        if (input[j] > input[max])
          max = j;
      }
      tmp = input[i];
      input[i] = input[max];
      input[max] = tmp;
    }
  }

// 삽입정렬
// 맨 처음 인덱스에 있는 원소를 정렬되어있는 상태라고 보고, 
// 두번째 인덱스에 있는 데이터를 이 정렬된 배열에 삽입하면서, 
// 두개의 데이터가 다시 정렬된 상태가 되도록 만드는 정렬 방식 O(n^2)

  private static void insertionSort(int[] input, int length) {
    int tmp;
    for (int i = 1; i < length; i++) {
      for (int j = i; j > 0; j--) {
        if (input[j - 1] > input[j]) {
          tmp = input[j - 1];
          input[j - 1] = input[j];
          input[j] = tmp;
        }
      }
    }
  }




Stream
: 자바 8부터 추가된 기능으로 
"컬렉션, 배열등의 저장 요소를 하나씩 참조하며
함수형 인터페이스(람다식)를 적용하여 반복적으로 처리할 수 있도록 해주는 기능"

// 예시

List<String> names = Arrays.asList("jeong", "pro", "jdk", "java");
// 기존의 코딩 방식
long count = 0;
for (String name : names) {
    if (name.contains("o")) {
        count++;
    }
}
System.out.println("Count : " + count); // 2
 
// 스트림 이용한 방식
count = 0;
count = names.stream().filter(x -> x.contains("o")).count();
System.out.println("Count : " + count); // 2


Stream은 주로 Collection, Array에서 쓰임
두 개뿐만 아니라 I/O resources, Generators, Stream ranges, Pattern 등에서도 쓰임

// Stream 생성 방법

List<String> names = Arrays.asList("jeong", "pro", "jdk", "java");
names.stream(); //Collection에서 스트림 생성
 
Double[] dArray = {3.1, 3.2, 3.3};
Arrays.stream(dArray);//배열로 스트림 생성
 
Stream<Integer> str = Stream.of(1,2); // 스트림 직접 생성


// 스트림의 구조는
1. 스트림 생성
2. 중개 연산
3. 최종 연산

즉, Collections같은 객체집합.스트림생성().중개연산().최종연산() 이런 구조임

// 중개연산 종류와 기능
filter : 조건에 맞는 것만 거름(필터링)
map : 각 요소를 연산하는 데 쓰임
peek : map과 유사하게 각 요소에 어떤 연산을 적용할 때 쓰임
sorted : 정렬
limit : 스트림의 개수를 제한
distinct : 요소 중 중복 제거
skip : 처음 n개의 요소는 제외하고 나머지 요소들로 새로운 stream을 만듦
mapToInt(Long, Double) : 해당 타입의 스트림으로 바꿔준다

// 최종연산 종류와 기능
count, min, max, sum, average : 개수, 최소값, 최대값, 핪, 평균
reduce : 누적된 값을 계산하는 함수

List<Integer> ages = new ArrayList<Integer>();
ages.add(1);ages.add(2);ages.add(3);//1,2,3
System.out.println(ages.stream().reduce((b,c) -> b+c).get());//1+2+3=6

forEach : map이나 peek의 최종연산 버전임 각 요소를 돌면서 처리할 수 있도록 되어 있음

List<Integer> ages = new ArrayList<Integer>();
ages.add(1);ages.add(2);ages.add(3);//1,2,3
Set<Integer> set = ages.stream().collect(Collectors.toSet());
set.forEach(x-> System.out.println(x));//1,2,3

collect : 스트림의 값들을 모아주는 기능임 toMap, toSet, toList 해당 스트림을 다시 컬렉션으로 바꿔줌
iterator : Iterator<T>를 반환함

List<String> names = Arrays.asList("jeong", "pro", "jdk", "java");
Iterator<String> iter = names.stream().iterator();
while(iter.hasNext()) {
    System.out.println(iter.next());//jeong, pro, jdk, java
}

noneMatch : 최종적으로 얻은 스트림의 "모든" 요소들이 조건을 만족하지 "않는"지를 판단해서 boolean값을 리턴.
anyMatch : 스트림의 요소들 중에 하나라도 조건을 만족하는지 판단해서 boolean값을 리턴
allMatch :스트림의 "모든" 요소들이 조건을 만족하는지를 판단해서 boolean값을 리턴


